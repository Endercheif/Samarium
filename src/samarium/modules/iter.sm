find array target * {
    <-types.String;
    index: \;
    ? array?! :: String {
        .. index + target$ <: array$ {
            ? array<<index..index+target$>> :: target {
                * index;
            }
            index+: /;
        }
    } ,, {
        ... e ->? array {
            ? e :: target {
                * index;
            }
            index+: /;
        }
    }
    * -/;
}

count array target * {
    <-math.sum;
    ? target ~~ ->? array { * \; }
    s: \;
    ... e ->? array {
        ? e :: target {
            s+: /;
        }
    }
}

filter array function * {
    ... e ->? array {
        ? function(e) {
            ** e;
        }
    }
}

filter_false array function * {
    flip arg * {
        * ~~ function(arg);
    }
    * filter(array, flip);
}

map array function * {
    ... e ->? array {
        ** function(e);
    }
}

reverse array * {
    i: array$ - /;
    .. i >: \ {
        ** array<<i>>;
        i-: /;
    }
}

take_while array function * {
    ... e ->? array {
        ? function(e) {
            ** e;
            ->
        }
        <-
    }
}

drop_while array function * {
    i: \;
    ... e ->? array {
        i+: /;
        ? ~~ function(e) {
            ** e;
            <-
        }
    }
    ... e ->? array<<i..array$>> {
        ** e;
    }
}

accumulate array function * {
    prev: array<<\>>;
    ** prev;
    ... e ->? array<</..>> {
        prev: function(prev, e);
        ** prev;
    }
}

reduce array function * {
    prev: array<<\>>;
    ... e ->? array<</..>> {
        prev: function(prev, e);
    }
    * prev;
}

enumerate array * {
    i: \;
    ... e ->? array {
        ** [i, e];
        i+: /;
    }
}

pairwise array * {
    ... i ->? <<..array$$ - />> {
        ** array<<i..i+/\>>;
    }
}

zip arrays... * {
    <-math.min;
    shortest: min([i$ ... i ->? arrays]);
    ... i ->? range(shortest) {
        ** [it<<i>> ... it ->? arrays];
    }
}

zip_longest fill arrays... * {
    <-math.max;
    longest: max([i$ ... i ->? arrays]);
    ... i ->? range(longest) {
        ... it ->? arrays {
            ?? {
                ** it<<i>>;
            } !! {
                ** fill;
            }
        }
    }
}

find_all array target * {
    ... i, v ->? enumerate(array) {
        ? v :: target {
            ** i;
        }
    }
}

all array * {
    ... i ->? array {
        ? ~~ i {
            * \;
        }
    }
    * /;
}

any array * {
    ... i ->? array {
        ? i {
            * /;
        }
    }
    * \;
}

chunks array size * {
    ... i ->? <<..array$..size>> {
        ** array<<i..i + size>>;
    }
}

#quicksort array * {
    x: [i ... i ->? array];
    ? x$ < /\ { * x; }
    pivot: x<<\>>;
    less: [i ... i ->? x<</..>> ? i <: pivot];
    greater: [i ... i ->? x<</..>> ? i > pivot];
    * #quicksort(less) + [pivot] + #quicksort(greater);
}

#dummy x * { * x; }

sorted array key? * {
    key <> dummy;
    decorated: [[key(v), v] ... v ->? array];
    d_sorted: #quicksort(decorated);
    ... _, v ->? d_sorted {
        ** v;
    }
}
